drug_list <- unique(spend$drugname_generic)
drug_list
?filter
?slice
by_user <- group_by(spend, drugname_generic) %>%
summarise(total_users = sum(user_count, na.rm = TRUE)) %>%
arrange(desc(total_users)) %>%
slice(1:100)
dim(by_user)
head(by_user)
by_user_top100 <- group_by(spend, drugname_generic) %>%
summarise(total_users = sum(user_count, na.rm = TRUE)) %>%
arrange(desc(total_users)) %>%
slice(1:100)
write_feather(spend[spend$drugname_generic %in% by_user_top100$drugname_generic,],
'testing-top100-byuser.feather')
source('combine-data.R')
combdf <- read_feather('combined-spending.feather')
combdf <- read_feather('combined-spending.feather')
combdf <- read_feather('combined-spending.feather')
dim(combdf)
dim(spend)
head(combdf)
head(spend)
head(get_year(2011))
unique(spend[,1])
tail(unique(spend[,1]))
source('combine-data.R')
drug_uses <- read_feather('drug_uses.feather')
drug_uses <- read_feather('/Users/jthompson/DataForDemocracy/drug-spending/drug_uses.feather')
drug_uses <- read_feather('/Users/jthompson/DataForDemocracy/dataworld/drug-spending/drug_uses.feather')
drug_uses <- read_feather('/Users/jthompson/DataForDemocracy/drug-spending/dataworld/drug_uses.feather')
dim(drug_uses)
head(drug_uses)
junk <- data.world::query(conn, dataset = 'data4democracy/drug-spending', query = "SELECT * FROM 'spending-2011'")
junk
df <- query(conn, dataset="bryon/odin-2015-2016", query="SELECT * FROM Tables")
df <- data.world::query(conn, dataset="bryon/odin-2015-2016", query="SELECT * FROM Tables")
df
df <- data.world::query(conn, dataset="bryon/odin-2015-2016", query="SELECT * FROM ODIN-2015-2016-raw")
df
df <- data.world::query(conn, dataset="bryon/odin-2015-2016", query="SELECT * FROM `ODIN-2015-2016-raw`")
df
df <- data.world::query(conn, dataset="bryon/odin-2015-2016", query="SELECT * FROM `ODIN-2015-2016-standardized`")
df
df <- data.world::query(conn, dataset="bryon/odin-2015-2016", query="SELECT * FROM `ODIN-2015-2016-standardized`")
df
shiny::runApp()
shiny::runGitHub('drug-spending', username = 'burrbank', subdir = 'R-Shiny')
runApp()
head(drug_costs)
dim(drug_costs)
rm(list = ls())
library(feather)
library(jsonlite)
library(dplyr)
spend2011 <- read_feather('../data/spending-2011.feather')
spend2011 <- read_feather('../dataworld/spending-2011.feather')
dim(spend2011)
spend2011 <- read_feather('../dataworld/spending-2011.feather')
spend2012 <- read_feather('../dataworld/spending-2012.feather')
spend2013 <- read_feather('../dataworld/spending-2013.feather')
spend2014 <- read_feather('../dataworld/spending-2014.feather')
spend2015 <- read_feather('../dataworld/spending-2015.feather')
# add year column
spend2011$year <- 2011
spend2012$year <- 2012
spend2013$year <- 2013
spend2014$year <- 2014
spend2015$year <- 2015
# stack the dataframes
spend <- rbind(spend2011, spend2012, spend2013, spend2014, spend2015)
rm(spend2011,spend2012,spend2013,spend2014,spend2015)
spend <- spend[order(spend$drugname_generic, spend$drugname_brand, spend$year),]
# create list of all drugs
drug_list <- unique(spend$drugname_generic)
#take random 100 drug sample from the drug list
drug_list_random <- sample(drug_list, size = 100)
write_feather(spend[spend$drugname_generic %in% drug_list_random,], 'testing-random.feather')
#take the first 100 drugs sorted by # of user
by_user <- group_by(spend, drugname_generic) %>%
summarise(total_users = sum(user_count, na.rm = TRUE)) %>%
arrange(desc(total_users))
by_user_top100 <- head(by_user, 100)
write_feather(spend[spend$drugname_generic %in% by_user_top100$drugname_generic,], 'testing-top100-byuser.feather')
runApp()
head(drug_costs)
rm(list = ls())
source('combine-data_jen.R')
runApp()
library(shinydashboard)
install.packages('shinycashboard')
install.packages('shinydashboard')
getwd()
setwd('/Users/jthompson/DataForDemocracy/drug-spending/shinydashboard-medicared')
source('combine_data.R')
?menuItem
library(shinydashboard)
?menuItem
?menuItemOutput
source('~/DataForDemocracy/drug-spending/shinydashboard-medicared/ui.R', echo=TRUE)
runApp()
?shinyServer
runApp()
runApp()
runApp()
runApp()
runApp()
?dashboardPage
runApp()
runApp()
runApp()
?observe
runApp()
runApp()
runApp()
runApp()
library(plotly)
?ggplotly
runApp()
library(magrittr)
runApp()
?plotlyOutput
?plot_ly
runApp()
runApp()
runApp()
runApp()
?observe
?selectInput
runApp()
runApp()
head(drug_costs)
runApp()
drug_costs$drugname_generic
drug_costs$drugname_generic[1]
runApp()
shinyServer(
function(input, output, session){
observe({
drug <- input$drug # generic drug name
brand <- input$brand # selected drug brands
dataset <- drug_costs[drug_costs$drugname_generic == input$drug,]
# updateSelectInput(session, "brand",
#                   choices = unique(dataset$drugname_brand),
#                   selected = unique(dataset$drugname_brand)
# ) # update the Select input$brand options
# if(!is.null(brand)){
#   dataset <- dataset[dataset$drugname_brand %in% brand,]
# } # allows first selection to show all drugs in that drug. TODO still need to do the same when switching drugs
## User counts
output$userCounts <- renderPlotly({
g <- ggplot(dataset, aes(x = year, y = user_count, color = drugname_brand)) +
geom_point() +
geom_line() +
theme(legend.position = 'none') +
labs(x = 'Year', y = 'Number of Users')
ggplotly(g)
})
## Average number of claims per user
output$avgClaimsPerUser <- renderPlotly({
g <- ggplot(dataset,
aes(x = year, y = (claim_count / user_count), color = as.factor(drugname_brand))) +
geom_point() +
geom_line() +
labs(color = 'Drug brands', x = 'Year', y ='Average Claims Per User')
ggplotly(g)
})
## Total spending
output$totalSpending <- renderPlotly({
g <- ggplot(dataset, aes(x = year, y = total_spending, color = as.factor(drugname_brand))) +
geom_point() +
geom_line() +
theme(legend.position = 'none') +
labs(x = 'Year', y = 'Total spending')
ggplotly(g)
})
## Average spending per user
output$avgCostPerUser <- renderPlotly({
g <- ggplot(dataset,
aes(x = year, y = total_spending_per_user, color = as.factor(drugname_brand))) +
geom_point() +
geom_line() +
theme(legend.position = 'none') +
labs(x = 'Year', y = 'Average Medicare Cost Per User')
ggplotly(g)
})
## Average out of pocket cost, low-income users
output$oopLIS <- renderPlotly({
g <- ggplot(dataset,
aes(x = year, y = out_of_pocket_avg_lowincome, color = as.factor(drugname_brand))) +
geom_point() +
geom_line() +
theme(legend.position = 'none') +
labs(x = 'Year', y = 'Average Out of Pocket Cost', title = 'Low-Income Subsidy Recipients')
ggplotly(g)
})
## Average out of pocket cost, non-low-income
output$oopNLIS <- renderPlotly({
g <- ggplot(dataset,
aes(x = year,
y = out_of_pocket_avg_non_lowincome,
color = as.factor(drugname_brand))) +
geom_point() +
geom_line() +
theme(legend.position = 'none') +
labs(x = 'Year', y = 'Average Out of Pocket Cost', title = "Non-LIS Recipients")
ggplotly(g)
})
})
})
runApp()
runApp()
?updateSelectInput
?shinyServer
runApp()
runApp()
?icon
?menuItem
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
####################################################################################################
## Combine 2011-2015 data housed on data.world into a single feather file
####################################################################################################
library(data.world)
library(feather)
library(jsonlite)
library(tidyverse)
## Set connection (see package README for details: https://github.com/datadotworld/data.world-r)
conn <- data.world()
## What data tables are available? (both dplyr and data.world have a query(); must specify)
data_list <- data.world::query(conn,
dataset = 'data4democracy/drug-spending',
query = "SELECT * FROM Tables")
data_list
drug_uses <- data.world::query(conn,
dataset = 'data4democracy/drug-spending',
query = "SELECT * FROM drug_uses")
drug_uses
runApp()
runApp()
rm(list = ls())
source('combine_data.R')
head(spend)
sample_n(subset(spend, select = c(drugname_brand, drugname_generic, total_spending, user_count, total_spending_per_user)))
sample_n(subset(spend, select = c(drugname_brand, drugname_generic, total_spending, user_count, total_spending_per_user)), size = 10)
sample_n(subset(spend, select = c(drugname_brand, total_spending, user_count, total_spending_per_user)), size = 10)
546576.21/200
4142910.85/706
74258121.75/82504
names(spend)
spend_overall <- spend %>%
group_by(drugname_generic, year) %>%
summarise(claim_count = sum(claim_count, na.rm = TRUE),
total_spending = sum(total_spending, na.rm = TRUE),
user_count = sum(user_count, na.rm = TRUE),
unit_count = sum(unit_count, na.rm = TRUE),
user_count_non_lowincome = sum(user_count_non_lowincome, na.rm = TRUE),
user_count_lowincome = sum(user_count_lowincome, na.rm = TRUE)) %>%
mutate(total_spending_per_user = total_spending / user_count,
drugname_brand = "ALL BRAND NAMES",
## Add NA values for variables that are brand-specific
unit_cost_wavg = NA,
out_of_pocket_avg_lowincome = NA,
out_of_pocket_avg_non_lowincome = NA)
dim(spend_overall)
8942/4
8942/5
dim(spend2011)
length(unique(spend$drugname_generic))
length(unique(subset(spend_overall, year = 2011)$drugname_generic))
length(unique(subset(spend_overall, year = 2012)$drugname_generic))
length(unique(subset(spend_overall, year = 2013)$drugname_generic))
length(unique(subset(spend_overall, year = 2014)$drugname_generic))
length(unique(subset(spend_overall, year = 2015)$drugname_generic))
2178*5
head(spend_overall)
spend_overall <- spend %>%
group_by(drugname_generic, year) %>%
summarise(claim_count = sum(claim_count, na.rm = TRUE),
total_spending = sum(total_spending, na.rm = TRUE),
user_count = sum(user_count, na.rm = TRUE),
unit_count = sum(unit_count, na.rm = TRUE),
user_count_non_lowincome = sum(user_count_non_lowincome, na.rm = TRUE),
user_count_lowincome = sum(user_count_lowincome, na.rm = TRUE)) %>%
mutate(total_spending_per_user = total_spending / user_count,
drugname_brand = "ALL BRAND NAMES",
## Add NA values for variables that are brand-specific
unit_cost_wavg = NA,
out_of_pocket_avg_lowincome = NA,
out_of_pocket_avg_non_lowincome = NA) %>%
ungroup()
dim(spend_overall)
length(unique(subset(spend_overall, year = 2015)$drugname_generic))
length(unique(subset(spend_overall, year == 2015)$drugname_generic))
length(unique(subset(spend_overall, year == 2014)$drugname_generic))
spend2 <- bind_rows(spend, spend_overall)
spend2
tail(spend2)
as.data.frame(subset(spend2, drugname_generic == 'ZOSTER VACCINE LIVE/PF'))
as.data.frame(subset(spend2, drugname_generic == 'NAPROXEN'))
rm(list = ls())
source('combine_data.R')
runApp()
rm(list = ls())
junk <- read_feather('testing-top100-byuser.feather')
junk
subset(junk, drugname_brand == "ALL BRAND NAMES")
subset(junk, drugname_generic == "NAPROXEN")
naproxen_df <- subset(junk, drugname_generic == "NAPROXEN")
ggplot(naproxen_df, aes(x = year, y = user_count, color = drugname_brand)) + geom_point() + geom_line()
ggplot(data = naproxen_df, aes(x = year, y = user_count, color = drugname_brand)) + geom_point() + geom_line()
p <- ggplot(data = naproxen_df, aes(x = year, y = user_count, color = drugname_brand)) + geom_point() + geom_line()
print(p)
naproxen_df
p <- ggplot(data = naproxen_df, aes(x = year, y = user_count, group = drugname_brand)) + geom_point() + geom_line()
p
shiny::runApp()
dev.list()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
runApp()
runApp()
runApp()
runApp()
?textOutput
runApp()
runApp()
runApp()
runApp()
runApp()
?need
runApp()
head(drug_costs$drugname_generic)
runApp()
runApp()
runApp()
arrange(drug_costs, user_counts)
names(drug_costs)
arrange(drug_costs, user_count)
arrange(drug_costs, user_count, decrease = TRUE)
?arrange
dplyr::arrange(drug_costs, user_count, desc = TRUE)
dplyr::arrange(drug_costs, desc(user_count))
dplyr::arrange(drug_costs_overall, desc(user_count))
?selectInput
runApp()
runApp()
sort(unique(drug_costs$drugname_generic))
runApp()
runApp()
head(as.data.frame(table(drug_costs$drugname_generic, drug_costs$drugname_brand)))
dplyr::arrange(as.data.frame(table(drug_costs$drugname_generic, drug_costs$drugname_brand), desc(Freq)))
dplyr::arrange(as.data.frame(table(drug_costs$drugname_generic, drug_costs$drugname_brand)), desc(Freq))
## How many unique brand names do we have for each generic?
brand_vs_generic <- drug_costs %>%
dplyr::select(drugname_brand, drugname_generic) %>%
unique()
brand_vs_generic
dplyr::arrange(as.data.frame(table(brand_vs_generic$drugname_generic)), desc(Freq))
library(wesanderson)
?wes_palettes
wes_palettes$BottleRocket
wes_palette("BottleRocket")
runApp()
runApp()
by_user_top100
rm(list = ls())
source('combine_data.R')
by_user_top100
drug_costs <- read_feather('testing-top100-byuser.feather')
head(drug_costs)
brand_indicators <- drug_costs %>%
group_by(drugname_brand, drugname_generic) %>%
summarise(total_users = sum(user_count, na.rm = TRUE))
brand_indicators
brand_indicators <- drug_costs %>%
group_by(drugname_brand, drugname_generic) %>%
summarise(total_users = sum(user_count, na.rm = TRUE))
arrange(desc(total_users)) %>%
mutate(generic_num = 1:n())
brand_indicators <- drug_costs %>%
group_by(drugname_brand, drugname_generic) %>%
summarise(total_users = sum(user_count, na.rm = TRUE)) %>%
arrange(desc(total_users)) %>%
mutate(generic_num = 1:n())
brand_indicators
brand_indicators <- drug_costs %>%
group_by(drugname_brand, drugname_generic) %>%
summarise(total_users = sum(user_count, na.rm = TRUE)) %>%
arrange(drugname_generic, desc(total_users)) %>%
mutate(generic_num = 1:n())
brand_indicators
brand_indicators <- drug_costs %>%
group_by(drugname_brand, drugname_generic) %>%
summarise(total_users = sum(user_count, na.rm = TRUE)) %>%
arrange(drugname_generic, desc(total_users)) %>%
mutate(generic_num = 1:count())
?n
brand_indicators <- drug_costs %>%
group_by(drugname_brand, drugname_generic) %>%
summarise(total_users = sum(user_count, na.rm = TRUE)) %>%
arrange(drugname_generic, desc(total_users))
brand_indicators
brand_indicators <- drug_costs %>%
group_by(drugname_brand, drugname_generic) %>%
summarise(total_users = sum(user_count, na.rm = TRUE)) %>%
arrange(drugname_generic, desc(total_users)) %>%
ungroup() %>%
group_by(drugname_generic) %>%
mutate(generic_num = 1:n())
brand_indicators
drug_costs2 <- left_join(drug_costs,
dplyr::select(brand_indicators, -total_users),
by = c('drugname_brand', 'drugname_generic'))
head(drug_costs2)
head(as.data.frame(drug_costs))
head(as.data.frame(drug_costs2))
runApp()
source('global.R')
head(drug_costs)
runApp()
runApp()
class(drug_costs$drugname_brand)
drug_costs
subset(drug_costs, drugname_generic == 'PEN NEEDLE, DIABETIC')
as.data.frame(subset(drug_costs, drugname_generic == 'PEN NEEDLE, DIABETIC'))
runApp()
source('combine_data.R')
runApp()
runApp()
runApp()
shiny::runApp()
?read_excel
readxl::read_excel()
?readxl::read_excel()
?readxl::read_excel
atc_codes <- read_csv('dataworld/atc_codes.csv')
atc_codes <- read_csv('../dataworld/atc_codes.csv')
atc_codes <- read_csv('/Users/jthompson/DataForDemocracy/drug-spending/dataworld/atc_codes.csv')
atc_codes <- read_csv('/Users/jthompson/DataForDemocracy/drug-spending/dataworld/atc-codes.csv')
head(atc_codes)
grep('ALZHEIMER', atc_codes)
unique(atc_codes$A)
unique(atc_codes$B)
ls()
grep('NALOXONE', drug_costs$drugname_generic)
####################################################################################################
## Combine 2011-2015 data housed on data.world into a single feather file
####################################################################################################
library(data.world)
library(feather)
library(jsonlite)
library(tidyverse)
## Set connection (see package README for details: https://github.com/datadotworld/data.world-r)
conn <- data.world()
## What data tables are available? (both dplyr and data.world have a query(); must specify)
data_list <- data.world::query(conn,
dataset = 'data4democracy/drug-spending',
query = "SELECT * FROM Tables")
drug_uses <- data.world::query(conn,
dataset = 'data4democracy/drug-spending',
query = "SELECT * FROM drug_uses")
## -- Read in each year's data set, add year and drug names, combine into a single data.frame ------
## Function to add a column with spending year to a data frame
add_drug_year <- function(df, yr){
mutate(df, year = yr)
}
## Function to read in one year's CSV from data.world
## First column is a row number; don't need that
get_year <- function(yr){
data.world::query(connection = conn,
dataset = 'data4democracy/drug-spending',
query = paste0("SELECT * FROM `spending-", yr, "`"))[,-1]
}
drug_years <- 2011:2015
spend <- map(drug_years, get_year) %>%
map2(drug_years, add_drug_year) %>%
bind_rows()
## -- Add a row for each generic with overall summaries of each variable ---------------------------
spend_overall <- spend %>%
group_by(drugname_generic, year) %>%
summarise(claim_count = sum(claim_count, na.rm = TRUE),
total_spending = sum(total_spending, na.rm = TRUE),
user_count = sum(user_count, na.rm = TRUE),
unit_count = sum(unit_count, na.rm = TRUE),
user_count_non_lowincome = sum(user_count_non_lowincome, na.rm = TRUE),
user_count_lowincome = sum(user_count_lowincome, na.rm = TRUE)) %>%
mutate(total_spending_per_user = total_spending / user_count,
drugname_brand = "ALL BRAND NAMES",
## Add NA values for variables that are brand-specific
unit_cost_wavg = NA,
out_of_pocket_avg_lowincome = NA,
out_of_pocket_avg_non_lowincome = NA) %>%
ungroup()
## -- For testing: data set of 100 random generics -------------------------------------------------
drug_list <- unique(spend$drugname_generic)
drug_list_random <- sample(drug_list, size = 100)
write_feather(spend[spend$drugname_generic %in% drug_list_random,], 'testing-random.feather')
write_feather(spend_overall[spend_overall$drugname_generic %in% drug_list_random,],
'testing-random-overall.feather')
grep('NALOXONE', spend$drugname_generic)
spend[grep('NALOXONE', spend$drugname_generic),]
as.data.frame(spend[grep('NALOXONE', spend$drugname_generic),])
runApp()
